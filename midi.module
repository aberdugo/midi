<?php

/**
 * @file
 * Midi File Module
 * A block module that diplays a midi-box for using Drupal File API to load a midi file.
 */

/**
 * Implements hook_help().
 *
 * Displays help and module information.
 *
 * @param path
 *   Which path of the site we're using to display help
 * @param arg
 *   Array that holds the current path as returned from arg() function
 */
function midi_help($path, $arg) {
  switch ($path) {
    case "admin/help#midi":
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This Midi module is designed and implemented with the premise of musical composition through graphic interface for users without knowledge of the subject, and that this composition can be translated and downloaded as a .mid file (MIDI standard).') . '</p>';
      $output .= '<h3>' . t('Interfaces') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Homepage') . '</dt>';
      $output .= '<dd>' . t('By default after the installation and activation of the module, on the home page the Midi block will be displayed in the highlighted region, as long as this region exists in the Drupal theme used by the website. This block will only be shown for users who have the "view block midi block" permission.
                                   After activating the module on this home page, the link to the following main screen, the Download Midi Files page, will also be displayed by default in the Navigation menu. Again only this link will be displayed by users who have the "view block midi block" permission.') . '</dd>';
      $output .= '<dt>' . t('Download Midi Files page') . '</dt>';
      $output .= '<dd>' . t('The Download Midi Files page shows a list of links to the download of each midi file, in which each link shows as information the name of the file and its size in bytes.
                                   If a user without the "view block midi block" permission tries to access this page by url address, they would be denied access. They are also denied access by url users with permission to download a file, if the url of the midi file does not belong to that user.') . '</dd>';
      $output .= '<dt>' . t('Page to configure the Midi permissions') . '</dt>';
      $output .= '<dd>' . t('We can get to this page from the Configure Midi permissions link found on the same help page of the Midi module or through the Users tab of the Administration menu and within Users the Permissions tab.
                                   By default after the first installation and activation of the Midi module, the "view block midi block" permission is only assigned to the Administrator role. We can assign this permission to other existing roles as an authenticated user or anonymous user, so that users who have these roles have permission in turn.') . '</dd>';
      $output .= '</dl>';
      return $output;
      break;
  }
}

/*
 * Vamos a crear el bloque midi-box
 */

/**
 * Implements hook_block_info().
 *
 * La función hook_block_info() no tiene parámetros de entrada.
 * Devuelve un vector asociativo con la definición del bloque.
 */
function midi_block_info() {
  // Declaración del bloque
  $blocks['midi_block'] = array(
    // The name tha will appear in the block list.
    'info' => t('Midi Block'), // info (obligatorio) - Nombre del bloque que aparecerá en el listado de bloques de administración. (Estructura/Bloques)
    'status' => 1, // status (opcional) - Valor inicial de estado del bloque (1 = habilitado, 0 = deshabilitado).
    'weight' => 0, // weight (opcional) - Valor inicial del peso de ordenación del bloque.
    'region' => 'highlighted', // region (opcional) - Valor inicial de la región en la que se muestra el bloque. Si el tema no dispone de la región indicada, el bloque se mostrará deshabilitado. // highlighted - Destacado.
    'visibility' => BLOCK_VISIBILITY_LISTED, // visibility (opcional) - Valor inicial de visibilidad del bloque. // BLOCK_VISIBILITY_LISTED - Se muestra sólo en las páginas indicadas.
    'pages' => '<front>', // pages (opcional) - Listado de URLs o código PHP relacionado con la opción visibility. // <front> - página de inicio
    'cache' => DRUPAL_CACHE_PER_ROLE, // cache (opcional) - Define el tipo de caché. // DRUPAL_CACHE_PER_ROLE (predeterminada) - El bloque puede cambiar en función de los roles del usuario que visita la página.
  );

  return $blocks;
}

/**
 * Implements hook_theme().
 *
 * Creamos el elemento midi_box al que le vamos a asignar la plantilla midi-box.
 */
function midi_theme($existing, $type, $theme, $path) {
  return array(
    'midi_box' => array(
      'template' => 'midi-box',
      'variables' => array(),
    ),
  );
}

/**
 * Implements hook_block_view().
 *
 * Prepares the contents of the block.
 */
function midi_block_view($delta = '') {
  $block = array();

  switch ($delta) {
    case 'midi_block':
      if (user_access('view block midi block')) {
        $block['subject'] = t('Midi Block'); // Indicamos el título predeterminado del bloque. Si el bloque no tiene un título predeterminado, debemos indicar NULL.
        $path = drupal_get_path('module', 'midi');
        $block['content'] = array( // El contenido del cuerpo del bloque. Esto deberá ser un vector renderizado (preferiblamente) o una cadena renderizada con contenido HTML.
          /*'part1' => array(
            '#markup' =>  midi_fileload_get_form(),
          ),*/
          'part2' => array(
            '#markup' =>  midi_savefile_get_form(),
          ),
          'part3' => array(
            '#theme' => 'midi_box',
            // '#markup' => theme('midi_box'), // t('Put here the form if could be.');
          ),
          '#attached' => array(
            'css' => array( // Agrega una hoja de estilos en cascada a la cola de la hoja de estilos.
              $path . '/css/midi-box.css',
            ),
            'js' => array( // Agrega un archivo JavaScript, configuración o código en línea a la página.
              $path . '/js/p5.js',
              $path . '/js/p5.dom.js',
              $path . '/js/p5.sound.js',
              $path . '/js/sketch.js',
              array(
                'data' => array('midi_module_path' => $path),
                'type' => 'setting',
              ),
            ),
          ),
        );
      }
      break;
  }
  return $block;
}

/**
 * Implements hook_permission().
 */
function midi_permission() {
  return array(
    'view block midi block' => array(
      'title' => t('View block: Midi Block'), // 'title' - Nombre del permiso. Se puede usar la función t() para que el nombre del permiso sea traducible.
      'description' => t('View the Midi Block.'), // 'description' (opcional) - Una descripción del permiso. También se puede hacer uso de la función t().
    ),
  );
}


// Funcionalidad 'part1'
/*
/**
 *  Form constructor for the midi_fileload_form.
 */
/*
function midi_fileload_form($form, &$form_state) {
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Midi file'),
    '#description' => t('Upload a midi file, allowed extension: mid'),
  );

  $form['submitLoad'] = array(
    '#type' => 'submit',
    '#value' => t('Load Midi'),
  );

  return $form;
}


function midi_fileload_get_form() {
  $form = drupal_get_form('midi_fileload_form');
  $output = drupal_render($form);

  return $output;
}
*/

/*
/**
 * Validate handler for midi_fileload_form().
 *
 * @ingroup form_example
 */
/*
function midi_fileload_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array(
    // Validate extensions.
    'file_validate_extensions' => array('mid'),
  ), FALSE,
    FILE_EXISTS_REPLACE);
  // If the file passed validation:
  if ($file) {
    $form_state['storage']['file'] = $file;
  }
  else {
    form_set_error('file', t('No file was uploaded.'));
  }
}
*/

/*
/**
 * Submit handler for midi_fileload_form().
 *
 * @ingroup form_example
 */
/*
function midi_fileload_form_submit($form, &$form_state) {
  $file = $form_state['storage']['file'];

  // We are done with the file, remove it from storage.
  unset($form_state['storage']['file']);
  // Make the storage of the file permanent.
  $file->status = FILE_STATUS_PERMANENT;
  // Save file status.
  file_save($file);

  // Set a response to the user.
  drupal_set_message(t('The form has been submitted and the midi file has been saved temporarily, filename: @filename.', array('@filename' => $file->filename)));
}
*/


// Funcionalidad 'part2'
/**
 *  Form constructor for the midi_savefile_form.
 */
function midi_savefile_form($form, &$form_state) {
  $form['msg'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="msg">',
    '#suffix' => '</div>',
  );

  $form['miditext'] = array(
    '#type' => 'textarea',
    '#title' => t(' Midi text '),
    '#required' => TRUE,
  );

  $form['submitCreate'] = array(
    '#type' => 'submit',
    '#value' => t('Save Midi file'),
    '#ajax' => array(
      'callback' => 'midi_savefile_submit_ajax_callback',
      'wrapper' => 'msg',
    ),
  );

  return $form;
}

function midi_savefile_get_form() {
  $form = drupal_get_form('midi_savefile_form');
  $output = drupal_render($form);

  return $output;
}


/**
 * Callback for save midi to DataBase.
 *
 * Select the 'box' element, change the markup in it, and return it as a
 * renderable array.
 *
 * @return array
 *   Renderable array (the box element)
 */
function midi_savefile_submit_ajax_callback($form, $form_state) {
  // In most cases, it is recommended that you put this logic in form generation
  // rather than the callback. Submit driven forms are an exception, because
  // you may not want to return the form at all.

  $element = $form['msg'];

  $stringMidi = $form_state['values']['miditext'];

  if (!empty($stringMidi)) {
    if (strpos($stringMidi, 'MFile') !== false) {
      $midi = new Midi(); // Midi - CONSTRUCTOR // (midi-class.inc)
      $midi->importTxt($stringMidi); // importTxt - import whole MIDI song as text (mf2t-format) // (midi-class.inc)
      $binaryMidi = $midi->getMid(); // getMid - returns binary MIDI string // (midi-class.inc)

      global $user;

      $timestamp = REQUEST_TIME;

      // Insertamos registro en la tabla file_binary_midi
      $result = db_insert('file_binary_midi')
        ->fields(array(
          'uid' => $user->uid,
          'filename' => $user->name . "_" . $timestamp .".mid",
          'bmidistring' => $binaryMidi,
          'filesize' => strlen($binaryMidi),
          'timestamp' => $timestamp,
        ))
        ->execute();

      drupal_set_message(t("Clicked submit ({$form_state['values']['op']}): " . $user->name . "_" . $timestamp .".mid saved."));
      // $element['#markup'] = "Clicked submit ({$form_state['values']['op']}): " . date('c'); // Si queremos crear un msg de vuelta al que después demos un css personalizado distinto de drupal.
    }
    else {
      form_set_error('miditext', t('Midi text does not have the correct format.'));
    }
  }

  return $element;
}

/**
 * Implements hook_menu().
 */
function midi_menu() {
  $items = array();
  $items['midi_files'] = array(
    'title' => 'Download Midi Files',
    'description' => 'Download Midi Files (description)',
    'page callback' => 'midi_links_page',
    'access callback' => 'user_access', // Función de retorno para determinar si el usuario tiene acceso o no a la página. (user_access() por defecto).
    'access arguments' => array('view block midi block'),
  );
  $items['midi_files/download/%/%'] = array(
    'page callback' => 'midi_filedownload',
    'page arguments' => array(2, 3),
    'access callback' => 'user_access', // Función de retorno para determinar si el usuario tiene acceso o no a la página. (user_access() por defecto).
    'access arguments' => array('view block midi block'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function midi_links_page() {
  $result = get_midis_user();

  $midi_links = array();

  foreach ($result as $midi_link) {
    $midi_links[] = array(
      'data'=> l($midi_link->filename . " // " . $midi_link->filesize . "bytes", 'midi_files/download/' . $midi_link->uid . '/' . $midi_link->fid),
    );
  }

  if(empty($midi_links)) {
    return t("You don't have midis in database.");
  }
  else {
    $output = theme('item_list', array('items' => $midi_links));
    return $output;
  }
}

// function get midis for user
function get_midis_user() {
  global $user;

  // Tomamos registro de la tabla file_binary_midi
  $result = db_select('file_binary_midi', 'm')
    ->fields('m')
    ->condition('uid', $user->uid, '=')
    ->orderBy('filename')
    ->execute();

  return $result;
}

function midi_filedownload($midi_file_uid, $midi_file_fid) {
  global $user;
  $bFileExists = false;

  if (isset($user->name)) {
    $username = $user->name;
  }
  else {
    $username = "Anonymous user";
  }

  if ($user->uid == $midi_file_uid) {
    // Tomamos registro de la tabla file_binary_midi
    $result = db_select('file_binary_midi', 'm')
      ->fields('m')
      ->condition('fid', $midi_file_fid, '=')
      ->execute();

    foreach ($result as $file) {
      $bFileExists = true;
      drupal_add_http_header('Content-length', $file->filesize);
      drupal_add_http_header('Content-type', $file->filemime);
      drupal_add_http_header('Content-Disposition', 'attachment; filename=' . $file->filename);

      print($file->bmidistring);
    }

    if ($bFileExists) {
      drupal_page_footer();
    }
    else {
      drupal_set_message(t("@username, this midi file doesn't exist.", array('@username' => $username)), 'error');
      drupal_goto('<front>');
    }
  }
  else {
    drupal_set_message(t("@username, you don't have access to this midi file.", array('@username' => $username)), 'error');
    drupal_goto('<front>');
  }
}

/*
 * Para traducir los textos de dentro de la función t() (Configuración/REGIONAL E IDIOMA-Traducir interfaz/TRADUCIR)
 */